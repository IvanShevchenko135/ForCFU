#define _CRT_SECURE_NO_WARNINGS 
#include <iostream> 
#include <cstdlib> 
#include <stdio.h> 
#include <vector> 
#include <set> 
#include <fstream> 
#include <algorithm> 
#include <math.h> 
#include <queue> 
#include <iterator> 
using namespace std;

int tree[10001];
int sear(int v) {
	int x = v;
	if (tree[v] != v) {
		x = sear(tree[v]);
	}
	tree[v] = x;
	return x;
}


int main() {
	int T;
	scanf("%d", &T);
	while (T--) {
		int N, M;
		int a, b;
		int score = 0;
		scanf("%d%d", &N, &M);
		for (int i = 0; i < N; i++) {
			tree[i] = i;
		}
		while (M--) {
			scanf("%d%d", &a, &b);
			a--; b--;
			a = sear(a);
			b = sear(b);
			if (a != b) {
				if (rand() % 2) {
					tree[a] = b;
				}
				else {
					tree[b] = a;
				}
			}
		}
		for (int i = 0; i < N; i++) {
			if (tree[i] == i) {
				score++;
			}
		}

		printf("%d\n", score - 1);
	}
	//system("pause");
	return 0;
}
/*
Задача T: Дороги
В Украине, как известно, много проблем. Одна из них — дороги. Вновь избранный президент Украины решил заняться строительством дорог. Его цель — построить некоторое дополнительное количество дорог между городами так, чтобы можно было проехать из любого города Украины в любой (возможно, через другие города, не обязательно напрямую). Естественно, при этом дополнительных дорог должно быть построено как можно меньше.

Будем считать, что все дороги в Украине двухсторонние (и уже имеющиеся, и те, что будут построены), то есть по ним возможно движение в обоих направлениях. Учтите, что между двумя городами может быть несколько дорог. Кроме того, могут существовать дороги, связывающие город с самим собой.

Input
Первая строка стандартного потока ввода содержит количество тестовых случаев Т.

Каждый тестовый случай состоит из нескольких строк.

Первая строка содержит два натуральных числа N, M, разделенных пробелом — количество городов и количество уже существующих дорог (1 ≤ N ≤ 10000, 1 ≤ M ≤ 100000).

Следующие M строк содержат по два целых числа Ai, Bi, разделенных пробелом — это номера городов, которые соединены уже существующей дорогой (1 ≤ Ai, Bi ≤ N).
Output
Для каждого тестового случая выведите в отдельную строку минимальное количество дорог, которое необходимо построить, чтобы существовал путь из любого города в любой.

Примеры
Входные данные
1
7 5
1 3
2 3
3 2
2 4
6 7
Результат работы
2
*/